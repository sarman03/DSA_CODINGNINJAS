Code Binary Search

You are given an integer array 'A' of size 'N', sorted in ascending order. You are also given an integer 'target'.
Your task is to write a function to search for 'target' in the array 'A'. If it exists, return its index in 0-based indexing. Otherwise, return -1.
Note: You must write an algorithm whose time complexity is O(logN).

Example:
Input: ‘N’ = 7 ‘target’ = 3
‘A’ = [1, 3, 7, 9, 11, 12, 45]

Output: 1

Explanation: For A = [1, 3, 7, 9, 11, 12, 45],
The index of element '3' is 1.
Hence, the answer is '1'.

Input format :
The first line contains an Integer 'N', which denotes the size of the array/list.
The second line contains 'N' single space-separated integers representing the elements in the array/list.
The third line contains the value of 'target' to be searched for in the array/list.

Output Format :
Return the index at which 'target' is present for each test case, -1 otherwise.






#include<iostream>
using namespace std;
#include"solution.h"

int binarySearch(int *input, int n, int val)
{
    int start = 0, end = n - 1;
    while (start <= end)
    {
        int mid = (start + end) / 2;
        if (input[mid] == val)
            return mid;
        else if (input[mid] < val)
            start = mid + 1;
        else
            end = mid - 1;
    }
    return -1;
}
int main() {
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int left = 0;
    int right =n-1;
    int target;
    cin>>target;
     int ans = binarySearch(arr, 0, n-1, target);
    cout<<ans;
    return 0;
}
